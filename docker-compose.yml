version: "3.3"

services:

  traefik:
    image: "traefik:v2.4.7"
    container_name: "traefik"
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
   #   - "--providers.docker.exposedbydefault=false"
   #   - "--entrypoints.web.address=:443"
    ports:
      - "80:443"
      - "443:443"
      #- "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      # On map la conf statique dans le conteneur
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      # On map la conf dynamique statique dans le conteneur
      - ./traefik/config.yml:/etc/traefik/config.yml:ro
      # On map les certificats dans le conteneur
      - ./certs:/etc/certs:ro
    networks:
      - proxy
    labels:
      # Permettre à ce conteneur d'être accessible par traefik
      - "traefik.enable=true"
      # Utilise la configuration du routeur "traefik" définie dans le fichier de configuration dynamique : ./traefik/config.yml
      - "traefik.http.routers.traefik=true"

  whoami:
    image: "containous/whoami"
    container_name: "whoami"
    security_opt:
      - no-new-privileges:true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)"
      - "traefik.http.routers.whoami.tls=true"
     # - "traefik.http.routers.whoami.entrypoints=https"


  cat-app:
    image: mikesir87/cats
    container_name: "cats_web"
    ports:
      - "5000:5000"
    labels: 
      - "traefik.enable=true"
      - "traefik.http.routers.cats_web.rule=Host(`cats.docker.localhost`)"
      - "traefik.http.routers.cats_web.tls=true"
    #  - "traefik.http.routers.cats_web.entrypoints=https"
  
  db:
    image: postgres
    container_name: "db_postgres"
    networks:
      - sonarnet
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data
  
  adminer:
    image: adminer
    container_name: "adminer"
    restart: always
    ports:
      - 5435:5435
  
  sonarqube:
    image: sonarqube:latest
    container_name: "sonarqube"
    expose:
      - 9000
    ports:
      - "9000:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    labels: 
      - "traefik.enable=true"
      - "traefik.http.routers.cats.rule=Host(`sonarqube.docker.localhost`)"

  influxdb:
    image: influxdb
    container_name: influxdb
    restart: always
    hostname: influxdb
    networks: 
      - influxdb
    ports:
      - 8086:8086
    environment:
      INFLUXDB_ADMIN_USER: ${INFLUXDB_USER}
      INFLUXDB_ADMIN_PASSWORD: ${INFLUXDB_USER_PASSWORD}
      INFLUX_DB: $INFLUX_DB  # nom de la base de données créée à l'initialisation d'InfluxDB
      INFLUXDB_USER: $INFLUXDB_USER  # nom de l'utilisateur pour gérer cette base de données
      INFLUXDB_USER_PASSWORD: $INFLUXDB_USER_PASSWORD  # mot de passe de l'utilisateur pour gérer cette base de données
    volumes:
      - influxdb:/var/lib/influxdb  # volume pour stocker la base de données InfluxDB

  telegraf:
    image: telegraf
    depends_on:
      - influxdb  # indique que le service influxdb est nécessaire
    container_name: telegraf
    restart: always
    networks: 
      - influxdb
    links:
      - influxdb:influxdb
    tty: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # nécessaire pour remonter les données du démon Docker
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf  # fichier de configuration de Telegraf

  grafana:
    image: grafana/grafana
    depends_on:
      - influxdb  # indique que le service influxdb est nécessaire
    container_name: grafana
    restart: always
    ports:
      - 3000:3000  # port pour accéder à l'interface web de Grafana
    links:
      - influxdb:influxdb
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,\
                          grafana-influxdb-08-datasource,\
                          grafana-kairosdb-datasource,\
                          grafana-piechart-panel,\
                          grafana-simple-json-datasource,\
                          grafana-worldmap-panel"
      GF_SECURITY_ADMIN_USER: $GF_SECURITY_ADMIN_USER  # nom de l'utilisateur créé par défaut pour accéder à Grafana
      GF_SECURITY_ADMIN_PASSWORD: $GF_SECURITY_ADMIN_PASSWORD  # mot de passe de l'utilisateur créé par défaut pour accéder à Grafana
    volumes:
      - ./grafana:/var/lib/grafana

  #sonarqube:
  #  image: sonarqube:latest
  #  expose:
  #    - 9000
  #  ports:
  #    - "9000:9000"
  #  networks:
  #    - sonarnet
  #  environment:
  #    - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
  #    - sonar.jdbc.url=jdbc:postgresql://db:5432/sonar
  #    - sonar.jdbc.username=sonar
  #    - sonar.jdbc.password=sonar
  #  volumes:
  #    - sonarqube_conf:/opt/sonarqube/conf
  #    - sonarqube_data:/opt/sonarqube/data
  #    - sonarqube_extensions:/opt/sonarqube/extensions
  #    - sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins

networks:
  influxdb:
  proxy:
    external: true
  sonarnet:

volumes:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_bundled-plugins:
  postgresql:
  postgresql_data:
  influxdb: